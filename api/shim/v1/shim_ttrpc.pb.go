// Code generated by protoc-gen-go-ttrpc. DO NOT EDIT.
// source: shim.proto
package v1

import (
	context "context"
	ttrpc "github.com/containerd/ttrpc"
)

type ShimService interface {
	Metrics(context.Context, *MetricsRequest) (*MetricsResponse, error)
}

func RegisterShimService(srv *ttrpc.Server, svc ShimService) {
	srv.RegisterService("zeropod.shim.v1.Shim", &ttrpc.ServiceDesc{
		Methods: map[string]ttrpc.Method{
			"Metrics": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req MetricsRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.Metrics(ctx, &req)
			},
		},
	})
}

type shimClient struct {
	client *ttrpc.Client
}

func NewShimClient(client *ttrpc.Client) ShimService {
	return &shimClient{
		client: client,
	}
}

func (c *shimClient) Metrics(ctx context.Context, req *MetricsRequest) (*MetricsResponse, error) {
	var resp MetricsResponse
	if err := c.client.Call(ctx, "zeropod.shim.v1.Shim", "Metrics", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}
